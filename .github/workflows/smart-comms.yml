name: Smart Comms

on:
  schedule:
    - cron: '5 8 * * *'
    - cron: '27 10 * * *'
    - cron: '46 13 * * *'
    - cron: '15 16 * * *'
    - cron: '33 19 * * *'
    - cron: '50 22 * * *'
    - cron: '12 23 * * *'
  workflow_dispatch:

jobs:
  commit:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 

      - name: Configure Git User
        run: |
          git config --global user.name "barendan"
          git config --global user.email "barendan@gmail.com"

      - name: Validate Repository Structure
        id: validate_structure
        run: |
          if [ ! -d "src" ]; then
            echo "Creating basic directory structure"
            mkdir -p src/components src/utils src/hooks
            echo "// Sample file" > src/components/App.js
            echo "// Sample file" > src/utils/helpers.js
            echo "// Sample file" > src/hooks/useFetch.js
          fi
          
          if [ ! -f "src/components/snippets.txt" ]; then
            echo "ERROR: snippets.txt file not found. Please ensure it exists at src/components/snippets.txt"
            exit 1
          fi
          
          echo "repository_validated=true" >> $GITHUB_OUTPUT

      - name: Choose Valid Files
        if: steps.validate_structure.outputs.repository_validated == 'true'
        id: choose_files
        run: |
          FILES=(
            "src/components/App.js"
            "src/components/Dashboard/Dashboard.jsx"
            "src/components/Dashboard/displayContact.jsx"
            "src/components/Dashboard/listContacts.jsx"
            "src/utils/helpers.js"
            "src/hooks/useFetch.js"
            ".env"
          )

          VALID_FILES=()
          for file in "${FILES[@]}"; do
            if [ -s "$file" ]; then
              VALID_FILES+=("$file")
            fi
          done

          if [ ${#VALID_FILES[@]} -eq 0 ]; then
            echo "No valid files found. Skipping commit."
            echo "valid_files_found=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          echo "valid_files_found=true" >> $GITHUB_OUTPUT
          
          # Decide how many files to modify (1-3)
          NUM_FILES=$((1 + RANDOM % 3))
          if [ $NUM_FILES -gt ${#VALID_FILES[@]} ]; then
            NUM_FILES=${#VALID_FILES[@]}
          fi
          
          SHUFFLED=($(printf "%s\n" "${VALID_FILES[@]}" | shuf))
          SELECTED_FILES=${SHUFFLED[@]:0:$NUM_FILES}
          
          echo "SELECTED_FILES=${SELECTED_FILES}" >> $GITHUB_ENV
          echo "Selected $NUM_FILES files for modification"
          
          echo "Selected $NUM_FILES files for modification"

      - name: Generate Real-Looking Updates
        if: steps.choose_files.outputs.valid_files_found == 'true' && steps.validate_structure.outputs.repository_validated == 'true'
        id: generate_updates
        run: |
          #!/bin/bash -e

          echo "Starting script..."
          SNIPPET_FILE="src/components/snippets.txt"
          
          # Use the selected files from environment variable
          CHANGED_FILES=()
          DEBUG_FIX=$((RANDOM % 5 < 2))  # 40% chance for debug fix

          for FILE in $SELECTED_FILES; do
            echo "Processing file: $FILE"
            
            if [ ! -f "$FILE" ]; then
              echo "ERROR: File $FILE doesn't exist"
              continue
            fi
            
            FILE_TYPE="${FILE##*.}"
            
            if [[ "$FILE_TYPE" == "js" || "$FILE_TYPE" == "jsx" ]]; then
              CATEGORY="Code Update"
            elif [[ "$FILE" == "README.md" ]]; then
              CATEGORY="Docs Update"
            elif [[ "$FILE" == "package.json" ]]; then
              CATEGORY="Dependency Update"
            elif [[ "$FILE" == ".env" ]]; then
              CATEGORY="Config Change"
            else
              CATEGORY="General Improvement"
            fi
            
            # Get random snippet
            SNIPPETS=$(awk '/===/{print "---"} !/===/' "$SNIPPET_FILE" | awk 'BEGIN{RS="---"} {print}' | shuf -n 1)
            
            TOTAL_LINES=$(wc -l < "$FILE")
            RANDOM_LINE=$((RANDOM % TOTAL_LINES + 1))
            
            # Insert snippet
            sed -i "${RANDOM_LINE}i\\${SNIPPETS}" "$FILE"
            CHANGED_FILES+=("$FILE")
            
            # 20% chance to add a debug statement
            if [[ $((RANDOM % 5)) -eq 0 ]]; then
              echo "console.log('DEBUG: Temporary statement');" >> "$FILE"
              DEBUG_FIX=1
            fi
          done

          if [ ${#CHANGED_FILES[@]} -eq 0 ]; then
            echo "No files were modified"
            echo "changes_made=false" >> $GITHUB_OUTPUT
            exit 0
          fi

          git add "${CHANGED_FILES[@]}"

          # Commit message
          TASK_NUMBER="TASK-$((100 + RANDOM % 900))"
          COMMIT_MSG="$TASK_NUMBER - ${CATEGORY}: "
          case $((RANDOM % 5)) in
            0) COMMIT_MSG+="Refactored for better performance";;
            1) COMMIT_MSG+="Fixed edge case handling";;
            2) COMMIT_MSG+="Improved code readability";;
            3) COMMIT_MSG+="Updated configuration";;
            4) COMMIT_MSG+="Optimized existing implementation";;
          esac

          git commit -m "$COMMIT_MSG"
          echo "changes_made=true" >> $GITHUB_OUTPUT
          echo "debug_fix=$DEBUG_FIX" >> $GITHUB_OUTPUT

      - name: Push Changes
        if: steps.generate_updates.outputs.changes_made == 'true'
        run: |
          # Try to push changes safely
          git pull --rebase origin master || true
          git push
          
          # If push fails due to conflicts, try a safer approach
          if [ $? -ne 0 ]; then
            echo "Push failed, trying to recover..."
            # Save our changes
            git format-patch -1 HEAD -o temp_patches
            
            # Get the latest code
            git fetch origin master
            git reset --hard origin/master
            
            # Try to apply our changes
            if git apply --check temp_patches/* 2>/dev/null; then
              # If it would apply cleanly, do it
              git apply temp_patches/*
              git add .
              git commit -m "$(cat temp_patches/0001-*.patch | grep -m 1 'Subject:' | sed 's/Subject: //')"
              git push
            else
              echo "Could not apply changes cleanly. Manual intervention required."
              exit 1
            fi
          fi

      - name: Fix Debug Logs (if needed)
        if: steps.generate_updates.outputs.debug_fix == '1'
        run: |
          sleep $((60 + RANDOM % 120))  # Wait 1-3 minutes
          
          # Find and remove debug statements in all changed files
          for FILE in $SELECTED_FILES; do
            if [ -f "$FILE" ]; then
              sed -i "/DEBUG: Temporary statement/d" "$FILE"
            fi
          done
          
          if [ -n "$(git diff)" ]; then
            git add .
            git commit -m "TASK-$((100 + RANDOM % 900)) - Removed debug statements"
            git pull --rebase
            git push
          fi


